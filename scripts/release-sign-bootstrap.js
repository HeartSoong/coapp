// Include js.js
with (new ActiveXObject("Scripting.FileSystemObject")) for (var x in p = (".;js;scripts;" + WScript.scriptfullname.replace(/(.*\\)(.*)/g, "$1") + ";" + new ActiveXObject("WScript.Shell").Environment("PROCESS")("PATH")).split(";")) if (FileExists(j = BuildPath(p[x], "js.js"))) { eval(OpenTextFile(j).ReadAll()); break }
Use("CoApp");

var filename, rx, major, minor, build, revision, newTxt;

/// Sign the binaries.
CoApp.SignBinary([CoApp.$RELEASEDIR("bootstrap.exe"), CoApp.$RELEASEDIR("CoApp.Resources.dll")]);
CoApp.StrongNameBinary(CoApp.$RELEASEDIR("BootstrapperUI.exe"));

CoApp.CopyFiles([
        CoApp.$RELEASEDIR("bootstrap.exe"), 
        CoApp.$RELEASEDIR("BootstrapperUI.exe"), 
        CoApp.$RELEASEDIR("CoApp.Resources.dll")], CoApp.$SOLUTIONBINARIES());

/// ****
/// Update the source code with a new version number for the next build
/// ****
filename = CoApp.$SOLUTIONSOURCE("CoApp.Bootstrap.VersionInfo.h");

if (newTxt = CoApp.LoadTextFile(filename)) {
    // COAPP_TOOLKIT_VERSION             1,1,2,1067
    rx = /COAPP_TOOLKIT_VERSION\s*(\d*),(\d*),(\d*),(\d*)/ig.exec(newTxt);
    
    major = parseInt(RegExp.$1.Trim());
    minor = parseInt(RegExp.$2.Trim());
    build = parseInt(RegExp.$3.Trim());
    revision = parseInt(RegExp.$4.Trim())+1;
    
    // overwrites completely.
    newTxt = '// This is an autogenerated file (see inc-build-numbers.js)\r\n' +
                '#define COAPP_TOOLKIT_VERSION             ' + major + ',' + minor + ',' + build + ',' + revision + '\r\n' +
                '#define COAPP_TOOLKIT_VERSION_STR         "' + major + '.' + minor + '.' + build + '.' + revision + '\\0"\r\n\r\n';

    WScript.echo("Incrementing Version Attributes in " + filename);
    CoApp.SaveTextFile(filename, newTxt);
}
