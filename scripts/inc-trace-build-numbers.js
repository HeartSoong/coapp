// Include js.js
with(new ActiveXObject("Scripting.FileSystemObject"))for(var x in p=(".;js;scripts;"+WScript.scriptfullname.replace(/(.*\\)(.*)/g,"$1")+";"+new ActiveXObject("WScript.Shell").Environment("PROCESS")("PATH")).split(";"))if(FileExists(j=BuildPath(p[x],"js.js"))){eval(OpenTextFile(j).ReadAll());break}

Use("MD5");

function WriteAll( filename, text ) {
    var f = $$.fso.OpenTextFile(filename, 2, true);
    f.WriteLine(text.Trim());
    f.Close();
}

function GetRelativePath(filename)  {
    var thisScript = fullpath($$.WScript.ScriptFullName);
    return fullpath(thisScript.substring(0,thisScript.lastIndexOf("\\"))+filename);
}

var rx, major, minor, build, revision;
var filename;

/// ---- CoApp Trace Pacakge --------------------------------------------------------------------------------------------

if( exists(filename = GetRelativePath( "\\..\\source\\CoApp.Trace.AssemblyStrongName.cs" )) ) {
    origTxt = ReadAll(filename);
    newTxt = origTxt;
    
    // unsigned version
    rx = /\[assembly: AssemblyVersion\("(.*)\.(.*)\.(.*)\.(.*)"\)\] \/\/UNSIGNED VERSION/ig;
    rx.exec(newTxt);
    
    major = parseInt(RegExp.$1.Trim());
    minor = parseInt(RegExp.$2.Trim());
    build = parseInt(RegExp.$3.Trim());
    revision = parseInt(RegExp.$4.Trim())+1;

    if( major < 1 )
        throw  "FAILURE";
    
    newTxt = newTxt.replace( /\[assembly: AssemblyVersion.*\/\/UNSIGNED VERSION/ig , '[assembly: AssemblyVersion("'+major+'.'+minor+'.'+build+'.'+revision+'")] //UNSIGNED VERSION' );
    newTxt = newTxt.replace( /\[assembly: AssemblyFileVersion.*\/\/UNSIGNED VERSION/ig , '[assembly: AssemblyFileVersion("'+major+'.'+minor+'.'+build+'.'+revision+'")] //UNSIGNED VERSION' );

    // signed version
    rx = /\[assembly: AssemblyVersion\("(.*)\.(.*)\.(.*)\.(.*)"\)\] \/\/SIGNED VERSION/ig;
    rx.exec(newTxt);
    
    major = parseInt(RegExp.$1.Trim());
    minor = parseInt(RegExp.$2.Trim());
    build = parseInt(RegExp.$3.Trim());
    revision = parseInt(RegExp.$4.Trim())+1;

    if( major < 1 )
        throw  "FAILURE (1)";
    
    newTxt = newTxt.replace( /\[assembly: AssemblyVersion.*\/\/SIGNED VERSION/ig , '[assembly: AssemblyVersion("'+major+'.'+minor+'.'+build+'.'+revision+'")] //SIGNED VERSION' );
    newTxt = newTxt.replace( /\[assembly: AssemblyFileVersion.*\/\/SIGNED VERSION/ig , '[assembly: AssemblyFileVersion("'+major+'.'+minor+'.'+build+'.'+revision+'")] //SIGNED VERSION' );
    
   
    if( origTxt.length >1000 && newTxt.length > 1000 ) {
        WScript.echo("Incrementing Version Attributes in "+filename);
        WriteAll( filename, newTxt );
    }
}

if( exists( filename = GetRelativePath( "\\..\\source\\CoApp.Trace.VersionInfo.h") ) ) {
    // overwrites completely.
    newTxt  =   '// This is an autogenerated file (see inc-build-numbers.js)\r\n' + 
                '#define COAPP_TRACE_VERSION             '+major+','+minor+','+build+','+revision+'\r\n'+
                '#define COAPP_TRACE_VERSION_STR         "'+major+'.'+minor+'.'+build+'.'+revision+'\\0"\r\n';
    
    WScript.echo("Incrementing Version Attributes in "+filename);
    WriteAll( filename, newTxt );
}

if( exists(filename = GetRelativePath("\\..\\source\\AssemblyStrongName.h")) ) {
    // overwrites completely.
    newTxt  =   '// This is an autogenerated file (see inc-build-numbers.js)\r\n' + 
                '#ifdef SIGN_ASSEMBLY\r\n' + 
                '[assembly: System::Reflection::AssemblyVersion("'+major+'.'+minor+'.'+build+'.'+revision+'")]; //SIGNED VERSION\r\n' + 
                '[assembly: System::Reflection::AssemblyFileVersion("'+major+'.'+minor+'.'+build+'.'+revision+'")]; //SIGNED VERSION\r\n' + 
                '#else \r\n' + 
                '[assembly: System::Reflection::AssemblyVersion("'+major+'.'+minor+'.'+(build-1)+'.'+revision+'")]; //UNSIGNED VERSION\r\n' + 
                '[assembly: System::Reflection::AssemblyFileVersion("'+major+'.'+minor+'.'+(build-1)+'.'+revision+'")]; //UNSIGNED VERSION\r\n' + 
                '#endif \r\n' 
    
    WScript.echo("Incrementing Version Attributes in "+filename);
    WriteAll(filename);
}