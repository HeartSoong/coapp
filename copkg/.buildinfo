
#product-info {
    product-name: "coapp";
    version: "1.2";
    original-source-location: "git@github.com:coapp/coapp.git";
    original-source-website: "https://github.com/coapp/coapp";
    license: "Apache2.0";
    packager: "garrett serack <garretts@microsoft.com>";
}

commit-version {
    compiler:vc11;
    // do the work neccessary to push the updated version.inc files or equivalent.
    // do the commit, not the push.
    
}

update-version {
    compiler:vc11;
    build-command: @"
        cscript //e:jscript scripts\increment-build-version.js
    ";
}

release { 
    compiler:vc11;
    default: true;
    // builds the binaries in "Release" mode but does not sign them.
    set : cfg = "Release";
    uses : {
        anycpu 
    };
    
    build-command: @"
        cscript //e:jscript scripts\increment-build-version.js
        echo RELEASE build done.
    ";
}

debug {
    compiler:vc11;
    // builds binaries in debug mode
    default: false;
    set : cfg = "Debug";
    uses : {
        anycpu 
    };
    
    build-command: @"echo DEBUG build done.";
}

package { 
    compiler:vc11;
    default: false;
    set : cfg = "Release";
    uses : sign-anycpu;
    build-command: @"
        ptk update-version
        
        REM Add the coapp tools folder to the end of the path, in case we don't have the tools in the path
        PATH=%PATH%;%CD%\ext\tools

        pskill coapp.service
        start output\any\Release\bin\coapp.service --interactive
        cd copkg
        autopackage coapp.toolkit.autopkg  || goto failed
        erase /Q *.wixpdb
        pskill coapp.service

        echo Done Packaging!
    ";
}

sign-anycpu {
    compiler:vc11;
    set : release_dir = @"output\any\Release\bin\";
    
    default: false;
    
    uses: {
        anycpu //, resources
    };
    
    targets: {
    };
    
    build-command: @"
        REM Add the coapp tools folder to the end of the path, in case we don't have the tools in the path
        PATH=%PATH%;%CD%\ext\tools
        
        REM sign files in release directory
        simplesigner --nologo --sign --strong-name  ""${release_dir}CoApp.Toolkit.dll"" ""${release_dir}CoApp.Client.dll"" ""${release_dir}CoApp.Service.exe"" ""${release_dir}CoApp.Cleaner.exe"" ""${release_dir}CoApp.exe"" ""${release_dir}CoApp.ElevationProxy.exe""  || goto failed
        
        REM copy the cleaner up to the Azure CDN.
        az copy ""${release_dir}CoApp.Cleaner.exe"" resources:
    ";
}

anycpu {
    default: no;
    platform : x86;
    compiler: vc11;
    
    uses: clean;
    
    targets: { 
        @"output\any\${cfg}\bin\CoApp.Cleaner.exe",
        @"output\any\${cfg}\bin\CoApp.ElevationProxy.exe",
        @"output\any\${cfg}\bin\CoApp.exe",
        @"output\any\${cfg}\bin\CoApp.Service.exe",
        @"output\any\${cfg}\bin\CoApp.Toolkit.dll",
        @"output\any\${cfg}\bin\CoApp.Client.dll",
    };

    build-command: @"
        msbuild  /p:Configuration=${cfg} ""/p:Platform=Any CPU"" coapp.sln || goto failed
    ";
}

resources {
    set : cfg = "Release";
    set : release_dir = @"output\any\Release\bin\";
    default: false;
    
    platform : x86;
    compiler: vc11;
    uses: clean;
    
    targets: {
        @"${release_dir}CoApp.Resources.dll"
    };
    
    
    build-command: @"REM Add the coapp tools folder to the end of the path, in case we don't have the tools in the path
        PATH=%PATH%;%CD%\ext\tools
    
        msbuild  /p:Configuration=${cfg} ""/p:Platform=win32"" /p:SolutionDir=..\ resources\Resources.vcxproj  || goto failed
        
        REM sign files in release directory
        simplesigner --nologo --sign --strong-name ""${release_dir}CoApp.Resources.dll""  || goto failed
        
        REM copy files to the .\binaries folder
        copy ""${release_dir}CoApp.Resources.dll"" binaries\
        
        REM copy up to the Azure CDN too.
        az copy ""${release_dir}CoApp.Resources.dll"" resources:
    ";
}

// Rehash DLLs are only built explicitly -- since they must always be signed 
// (and *rarely* ever need modification 
// we only build and sign them if we really, really need to 
// (they are picked up by the build from the .\binaries folder)
// use:
// ptk rehash-prerequisites
rehash-prerequisites {
    compiler:vc11;
    set : cfg = "Release";
    set : release_dir = @"output\any\Release\bin\";
    default: false;
    
    uses: {
        rehash-x86,
        rehash-x64,
    };
    
    targets: {
        @"${release_dir}CoApp.Rehash.x86.dll",
        @"${release_dir}CoApp.Rehash.x64.dll",
    };
    
    
    //REM for %%F in (ptk.exe) do set SIMPLESIGNER=%%~f$PATH:F
    build-command: @" 
        REM Add the coapp tools folder to the end of the path, in case we don't have the tools in the path
        PATH=%PATH%;%CD%\ext\tools
    
        REM sign files in release directory
        simplesigner --nologo --sign ""${release_dir}CoApp.Rehash.x86.dll"" ""${release_dir}CoApp.Rehash.x64.dll"" || goto failed
        
        REM copy files to the .\binaries folder
        copy /Y ""${release_dir}CoApp.Rehash.x86.dll""  binaries\
        copy /Y ""${release_dir}CoApp.Rehash.x64.dll"" binaries\
    ";
}

rehash-x86 {
    default: false;
    platform : x86;
    compiler: vc11;
    uses: clean;
    
    targets: { 
        @"output\any\${cfg}\bin\CoApp.Rehash.x86.dll",
    };

    build-command: @"
        msbuild  /p:Configuration=${cfg} ""/p:Platform=win32"" /p:SolutionDir=..\ rehash\CoApp.Rehash.x86.vcxproj  || goto failed
    ";
}

rehash-x64 {
    default: false;
    platform : x64;
    compiler: vc11;
    uses: clean;
    
    targets: { 
        @"output\any\${cfg}\bin\CoApp.Rehash.x64.dll",
    };

    build-command: @"
        msbuild  /p:Configuration=${cfg} ""/p:Platform=x64"" /p:SolutionDir=..\ rehash\CoApp.Rehash.x64.vcxproj || goto failed
    ";
}

clean {
    compiler:vc11;
    default: no;
    
    clean-command: @"
        rmdir /s /q output intermediate obj bin > nul 2>&1
        for /d %%v in (*) do if exist %%v\obj rmdir /s /q %%v\obj > nul 2>&1
        for /d %%v in (*) do if exist %%v\bin rmdir /s /q %%v\bin > nul 2>&1
    ";
}